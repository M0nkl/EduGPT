# app/main.py
from fastapi import FastAPI, Depends, HTTPException, Query, UploadFile, File, Form, Body
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List, Optional
import requests
import re

from database import get_db, init_db
from models import Methodic
from search import search_methodics, format_methodics_for_prompt
from config import settings
from pydantic import BaseModel

app = FastAPI(title="Methodics Chat Bot (Strict Mode)", version="2.6.0")

# ------------------ CORS ------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ------------------ DB INIT ------------------
@app.on_event("startup")
def on_startup():
    init_db()


# ------------------ MODELS ------------------
class ChatRequest(BaseModel):
    question: str
    max_results: int = 5
    full: bool = False


class MethodicSnippet(BaseModel):
    id: int
    title: str
    subject: Optional[str] = None
    author: Optional[str] = None
    content_snippet: str


class ChatResponse(BaseModel):
    answer: str
    sources: List[MethodicSnippet]
    found_methodics: int


class MethodicCreate(BaseModel):
    title: str
    content: str
    subject: Optional[str] = None
    author: Optional[str] = None


# ------------------ HELPERS ------------------
def format_sources(methodics: List[Methodic], full: bool = False) -> List[MethodicSnippet]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ—Ç—Ä–µ–∑–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)."""
    sources = []
    for m in methodics:
        text = m.content if full else (m.content[:400] + "..." if len(m.content) > 400 else m.content)
        sources.append(
            MethodicSnippet(
                id=m.id,
                title=m.title,
                subject=m.subject,
                author=m.author,
                content_snippet=text
            )
        )
    return sources


def extract_from_methodics(question: str, methodics: List[Methodic]) -> Optional[str]:
    """
    –ò—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ—Ç–æ–¥–∏—á–µ–∫.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    """
    if not methodics:
        return None

    keywords = re.findall(r'\w+', question.lower())
    keywords = [k for k in keywords if len(k) > 2]
    if not keywords:
        return None

    found_sentences = []
    for m in methodics:
        text = m.content or ""
        sentences = re.split(r'(?<=[.!?])\s+', text)
        for s in sentences:
            for kw in keywords:
                if kw in s.lower():
                    found_sentences.append(f"–ò–∑ –º–µ—Ç–æ–¥–∏—á–∫–∏ ¬´{m.title}¬ª ({m.author}): {s.strip()}")
                    break

    if found_sentences:
        return "\n\n".join(found_sentences[:3])
    return None

def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç: –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫"""
    text = re.sub(r'\s+', ' ', text)
    return text.strip()


# ------------------ GEMINI API ------------------
def call_gemini_api(question: str, context: str) -> str:
    """
    Gemini –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    –ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥–æ–ª–∂–Ω–∞ –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º.
    """
    instruction = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. "
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. "
        "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, "
        "—á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –º–µ—Ç–æ–¥–∏—á–µ–∫ –Ω–µ—Ç, "
        "–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å "
        "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    user_prompt = f"""
–ö–û–ù–¢–ï–ö–°–¢:
{context[:6000]}

–í–û–ü–†–û–°:
{question}
"""

    url = f"{settings.GEMINI_API_URL}?key={settings.GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [{"parts": [{"text": instruction}, {"text": user_prompt}]}],
        "generationConfig": {
            "temperature": 0.3,
            "maxOutputTokens": 1000,
            "topP": 0.9
        }
    }

    try:
        resp = requests.post(url, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {resp.status_code} - {resp.text[:200]}")
            return ""
        data = resp.json()
        answer = (
            data.get("candidates", [{}])[0]
            .get("content", {})
            .get("parts", [{}])[0]
            .get("text", "")
            .strip()
        )
        return answer
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Gemini: {e}")
        return ""


# ------------------ MAIN LOGIC ------------------
@app.post("/chat", response_model=ChatResponse)
async def chat_with_methodics(
    request: ChatRequest,
    db: Session = Depends(get_db)
):
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∏—á–µ–∫ –ø–æ –≤–æ–ø—Ä–æ—Å—É.
    2. –ï—Å–ª–∏ –º–µ—Ç–æ–¥–∏—á–∫–∏ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ.
    3. –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî Gemini —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    methodics = search_methodics(db, request.question, request.max_results)

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –Ω–µ—Ç –º–µ—Ç–æ–¥–∏—á–µ–∫ ---
    if not methodics:
        print("‚ùå –ú–µ—Ç–æ–¥–∏—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        answer = (
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É. "
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ChatResponse(answer=answer, sources=[], found_methodics=0)

    sources = format_sources(methodics, request.full)

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ ---
    local_answer = extract_from_methodics(request.question, methodics)
    if local_answer:
        print("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∏—á–µ–∫.")
        return ChatResponse(answer=local_answer, sources=sources, found_methodics=len(methodics))

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –º–µ—Ç–æ–¥–∏—á–∫–∏ –µ—Å—Ç—å, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî Gemini –æ–±–æ–±—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
    print("‚öôÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Gemini.")
    context = format_methodics_for_prompt(methodics)
    gemini_answer = call_gemini_api(request.question, context)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Gemini ---
    if not gemini_answer or len(gemini_answer.strip()) < 15:
        print("‚ö†Ô∏è Gemini –Ω–µ –¥–∞–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        gemini_answer = (
            "–û—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–º—É. "
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        )

    return ChatResponse(answer=gemini_answer, sources=sources, found_methodics=len(methodics))


# ------------------ /search ------------------
@app.get("/search", response_model=List[MethodicSnippet])
async def search_methodics_endpoint(
    query: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    limit: int = Query(10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    db: Session = Depends(get_db)
):
    methodics = search_methodics(db, query, limit)
    return format_sources(methodics, full=False)


# ------------------ /methodics/{id} ------------------
@app.get("/methodics/{methodic_id}", response_model=MethodicSnippet)
async def get_methodic(methodic_id: int, db: Session = Depends(get_db)):
    methodic = db.query(Methodic).filter(Methodic.id == methodic_id).first()
    if not methodic:
        raise HTTPException(status_code=404, detail="–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return MethodicSnippet(
        id=methodic.id,
        title=methodic.title,
        subject=methodic.subject,
        author=methodic.author,
        content_snippet=methodic.content
    )


# ------------------ /upload_methodic ------------------
@app.post(
    "/upload_methodic",
    response_model=MethodicSnippet,
    summary="Upload new methodic",
    description="""
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –º–µ—Ç–æ–¥–∏—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.  

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**  
1. **JSON** ‚Äì –ø–µ—Ä–µ–¥–∞–µ–º title, content, subject, author  
2. **–§–æ—Ä–º–∞ + —Ñ–∞–π–ª .txt** ‚Äì –ø–µ—Ä–µ–¥–∞–µ–º title, subject, author –∏ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –º–µ—Ç–æ–¥–∏—á–∫–∏  
"""
)
async def upload_methodic(
    methodic: Optional[MethodicCreate] = Body(
        None,
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–µ–π"
    ),
    title: Optional[str] = Form(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏—á–∫–∏"),
    content: Optional[str] = Form(None, description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–æ–¥–∏—á–∫–∏"),
    subject: Optional[str] = Form(None, description="–ü—Ä–µ–¥–º–µ—Ç –º–µ—Ç–æ–¥–∏—á–∫–∏"),
    author: Optional[str] = Form(None, description="–ê–≤—Ç–æ—Ä –º–µ—Ç–æ–¥–∏—á–∫–∏"),
    file: Optional[UploadFile] = File(None, description="–§–∞–π–ª .txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –º–µ—Ç–æ–¥–∏—á–∫–∏"),
    db: Session = Depends(get_db)
):
#JSON-–¥–∞–Ω–Ω—ã–µ
    if methodic:
        title = methodic.title
        content = methodic.content
        subject = methodic.subject
        author = methodic.author

#–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    if file:
        if not file.filename.endswith(".txt"):
            raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        if file.spool_max_size > 5 * 1024 * 1024:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5MB)")
        file_content = await file.read()
        if not file_content.strip():
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        content = file_content.decode("utf-8") if not content else content

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not title or not content:
        raise HTTPException(status_code=400, detail="–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å title –∏ content")

#–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    content = clean_text(content)

#–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    new_methodic = Methodic(
        title=title,
        content=content,
        subject=subject,
        author=author
    )
    db.add(new_methodic)
    db.commit()
    db.refresh(new_methodic)

    return MethodicSnippet(
        id=new_methodic.id,
        title=new_methodic.title,
        subject=new_methodic.subject,
        author=new_methodic.author,
        content_snippet=new_methodic.content
    )

# ------------------ ROOT ------------------
@app.get("/")
async def root():
    return {"message": "Methodics Chat Bot API (Strict Mode)", "version": "2.6.0"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
