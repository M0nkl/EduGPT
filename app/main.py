from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import requests
import json
from typing import List

from database import get_db, init_db
from models import Methodic
from search import search_methodics, format_methodics_for_prompt
from config import settings

app = FastAPI(title="Methodics Chat Bot", version="1.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
def on_startup():
    init_db()


# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
from pydantic import BaseModel


class ChatRequest(BaseModel):
    question: str
    max_results: int = 5


class ChatResponse(BaseModel):
    answer: str
    sources: List[dict]
    found_methodics: int


class MethodicResponse(BaseModel):
    id: int
    title: str
    subject: str
    author: str
    content: str


#TODO: –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å, –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
def call_groq_api(question: str, context: str) -> str:
    """Groq API - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    headers = {
        "Authorization": f"Bearer {settings.GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = f"""
    –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ú–ï–¢–û–î–ò–ß–ï–ö:
    {context}

    –í–û–ü–†–û–°: {question}

    –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.
    """

    data = {
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        "model": "llama-3.1-8b-instant",  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –º–æ–¥–µ–ª—å
        "temperature": 0.3,
        "max_tokens": 1000,
        "top_p": 0.9
    }

    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Groq API...")
        response = requests.post(settings.GROQ_API_URL, headers=headers, json=data, timeout=30)
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            answer = result['choices'][0]['message']['content']
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Groq!")
            return answer
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Groq: {response.status_code} - {response.text[:200]}")
            return create_fallback_response(question, context)

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return create_fallback_response(question, context)

#TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ faq
def create_fallback_response(question: str, context: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    if not context or "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ—Ç–æ–¥–∏—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in context:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –º–µ—Ç–æ–¥–∏—á–µ–∫ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É."

    keywords = {
        "python": "Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
        "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        "sql": "SQL - —è–∑—ã–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.",
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –Ω–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö."
    }

    question_lower = question.lower()
    for keyword, answer in keywords.items():
        if keyword in question_lower:
            return f"""**–í–æ–ø—Ä–æ—Å:** {question}

**–û—Ç–≤–µ—Ç:** {answer}

*–≠—Ç–æ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ AI –º–æ–¥–µ–ª–∏.*"""

    # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return f"""**–í–æ–ø—Ä–æ—Å:** {question}

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–µ—Ç–æ–¥–∏—á–µ–∫:**
{context[:800]}...

*AI –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –≠—Ç–æ —Å—ã—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–µ—Ç–æ–¥–∏—á–µ–∫.*"""

@app.post("/chat", response_model=ChatResponse)
async def chat_with_methodics(
        request: ChatRequest,
        db: Session = Depends(get_db)
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    """
    methodics = search_methodics(db, request.question, request.max_results)

    context = format_methodics_for_prompt(methodics)

    answer = call_groq_api(request.question, context)

    sources = [
        {
            "id": methodic.id,
            "title": methodic.title,
            "subject": methodic.subject,
            "author": methodic.author
        }
        for methodic in methodics
    ]

    return ChatResponse(
        answer=answer,
        sources=sources,
        found_methodics=len(methodics)
    )


@app.get("/search", response_model=List[MethodicResponse])
async def search_methodics_endpoint(
        query: str,
        limit: int = 10,
        db: Session = Depends(get_db)
):
    """
    –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∏—á–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ AI)
    """
    methodics = search_methodics(db, query, limit)
    return [
        MethodicResponse(
            id=methodic.id,
            title=methodic.title,
            subject=methodic.subject,
            author=methodic.author,
            content=methodic.content
        )
        for methodic in methodics
    ]


@app.get("/methodics/{methodic_id}", response_model=MethodicResponse)
async def get_methodic(
        methodic_id: int,
        db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ—Ç–æ–¥–∏—á–∫–∏ –ø–æ ID
    """
    methodic = db.query(Methodic).filter(Methodic.id == methodic_id).first()
    if not methodic:
        raise HTTPException(status_code=404, detail="–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return methodic


@app.get("/")
async def root():
    return {"message": "Methodics Chat Bot API", "version": "1.0.0"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)